#!/data/data/com.termux/files/usr/bin/bash

# chr-node Android/Termux Binary
# Optimized for mobile deployment with full Termux API integration

# Environment setup
CHR_NODE_HOME="${CHR_NODE_HOME:-$HOME/.chr-node}"
CHR_NODE_CONFIG="${CHR_NODE_CONFIG:-$CHR_NODE_HOME/config/chr-node.conf}"
CHR_NODE_DATA="${CHR_NODE_DATA:-$CHR_NODE_HOME/data}"
CHR_NODE_LOGS="${CHR_NODE_LOGS:-$CHR_NODE_HOME/logs}"

# Create directory structure
mkdir -p "$CHR_NODE_HOME"/{bin,config,data,logs,keys,web}

# Detect Termux environment
if [[ "$PREFIX" == "/data/data/com.termux/files/usr" ]]; then
    PLATFORM="termux-android"
    TERMUX_ENABLED=true
else
    PLATFORM="generic-linux"
    TERMUX_ENABLED=false
fi

# Function to log with timestamp
log_info() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] [INFO] $*" | tee -a "$CHR_NODE_LOGS/chr-node.log"
}

log_error() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] [ERROR] $*" | tee -a "$CHR_NODE_LOGS/chr-node.log"
}

log_warn() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] [WARN] $*" | tee -a "$CHR_NODE_LOGS/chr-node.log"
}

# Function to check Termux APIs
check_termux_apis() {
    if [ "$TERMUX_ENABLED" = true ]; then
        log_info "ü§ñ Detected Termux environment - enabling mobile optimizations"
        
        # Test essential Termux APIs
        local api_failures=0
        
        # Battery status
        if command -v termux-battery-status >/dev/null 2>&1; then
            log_info "‚úÖ Battery API available"
        else
            log_warn "‚ö†Ô∏è Battery API not available"
            ((api_failures++))
        fi
        
        # WiFi info
        if command -v termux-wifi-connectioninfo >/dev/null 2>&1; then
            log_info "‚úÖ WiFi API available"
        else
            log_warn "‚ö†Ô∏è WiFi API not available"
            ((api_failures++))
        fi
        
        # Device info
        if command -v termux-telephony-deviceinfo >/dev/null 2>&1; then
            log_info "‚úÖ Telephony API available"
        else
            log_warn "‚ö†Ô∏è Telephony API not available"
            ((api_failures++))
        fi
        
        if [ $api_failures -eq 0 ]; then
            log_info "üéâ All essential Termux APIs available"
        else
            log_warn "‚ö†Ô∏è $api_failures Termux APIs missing - some features may not work"
        fi
    else
        log_info "üñ•Ô∏è Generic Linux environment detected"
    fi
}

# Function to start chr-node service
start_service() {
    log_info "üöÄ Starting chr-node service..."
    
    check_termux_apis
    
    # Create default configuration if it doesn't exist
    if [ ! -f "$CHR_NODE_CONFIG" ]; then
        log_info "üìù Creating default configuration..."
        cat > "$CHR_NODE_CONFIG" << 'CONFIG_EOF'
[node]
id = "chr-node-mobile-$(date +%s)"
name = "chr-node-termux"
data_dir = "$CHR_NODE_DATA"

[network]
listen_port = 8080
api_port = 3000
max_peers = 10

[mobile]
platform = "termux-android"
battery_optimization = true
data_conservation = true
background_sync_interval = 300

[security]
api_key = "development-key-$(date +%s | sha256sum | cut -c1-16)"
nft_verification = false
CONFIG_EOF
        log_info "‚úÖ Configuration created at $CHR_NODE_CONFIG"
    fi
    
    log_info "üîß chr-node configuration:"
    log_info "   Home: $CHR_NODE_HOME"
    log_info "   Config: $CHR_NODE_CONFIG" 
    log_info "   Data: $CHR_NODE_DATA"
    log_info "   Logs: $CHR_NODE_LOGS"
    log_info "   Platform: $PLATFORM"
    
    # Start web interface if available
    if [ -d "$CHR_NODE_HOME/web" ] && command -v npm >/dev/null 2>&1; then
        log_info "üåê Starting web interface on port 3000..."
        cd "$CHR_NODE_HOME/web"
        npm start > "$CHR_NODE_LOGS/web.log" 2>&1 &
        echo $! > "$CHR_NODE_HOME/.web-pid"
        log_info "‚úÖ Web interface started (PID: $!)"
    else
        log_warn "‚ö†Ô∏è Web interface not available (npm not found or web directory missing)"
    fi
    
    # Start main service (mock implementation for development)
    log_info "‚ö° Starting chr-node core service..."
    
    # Create PID file
    echo $$ > "$CHR_NODE_HOME/.chr-node-pid"
    
    log_info "‚úÖ chr-node service started successfully"
    log_info "üì± Access web interface: http://localhost:3000"
    log_info "üìä View logs: tail -f $CHR_NODE_LOGS/chr-node.log"
    
    # Service loop (development mock)
    local block_height=1000000
    while true; do
        if [ "$TERMUX_ENABLED" = true ]; then
            # Get battery level for mobile optimization
            local battery_info=""
            if command -v termux-battery-status >/dev/null 2>&1; then
                battery_info=" | Battery: $(termux-battery-status | grep -o '"percentage":[0-9]*' | cut -d: -f2)%"
            fi
            
            log_info "üì° Node running - Height: $block_height | Peers: 3$battery_info"
        else
            log_info "üì° Node running - Height: $block_height | Peers: 3"
        fi
        
        ((block_height++))
        sleep 60
    done
}

# Function to stop chr-node service
stop_service() {
    log_info "üõë Stopping chr-node service..."
    
    # Stop web interface
    if [ -f "$CHR_NODE_HOME/.web-pid" ]; then
        local web_pid=$(cat "$CHR_NODE_HOME/.web-pid")
        if kill -0 "$web_pid" 2>/dev/null; then
            kill "$web_pid"
            log_info "‚úÖ Web interface stopped"
        fi
        rm -f "$CHR_NODE_HOME/.web-pid"
    fi
    
    # Stop main service
    if [ -f "$CHR_NODE_HOME/.chr-node-pid" ]; then
        local main_pid=$(cat "$CHR_NODE_HOME/.chr-node-pid")
        if kill -0 "$main_pid" 2>/dev/null; then
            kill "$main_pid"
            log_info "‚úÖ chr-node service stopped"
        fi
        rm -f "$CHR_NODE_HOME/.chr-node-pid"
    fi
    
    # Kill any remaining processes
    pkill -f "chr-node" 2>/dev/null || true
    
    log_info "üîö chr-node service stopped"
}

# Function to show service status
show_status() {
    echo "chr-node Status Report"
    echo "====================="
    echo "Platform: $PLATFORM"
    echo "Home: $CHR_NODE_HOME"
    echo "Config: $CHR_NODE_CONFIG"
    echo ""
    
    # Check main service
    if [ -f "$CHR_NODE_HOME/.chr-node-pid" ]; then
        local main_pid=$(cat "$CHR_NODE_HOME/.chr-node-pid")
        if kill -0 "$main_pid" 2>/dev/null; then
            echo "Main Service: ‚úÖ Running (PID: $main_pid)"
        else
            echo "Main Service: ‚ùå Not running (stale PID file)"
        fi
    else
        echo "Main Service: ‚ùå Not running"
    fi
    
    # Check web interface
    if [ -f "$CHR_NODE_HOME/.web-pid" ]; then
        local web_pid=$(cat "$CHR_NODE_HOME/.web-pid")
        if kill -0 "$web_pid" 2>/dev/null; then
            echo "Web Interface: ‚úÖ Running (PID: $web_pid) - http://localhost:3000"
        else
            echo "Web Interface: ‚ùå Not running (stale PID file)"
        fi
    else
        echo "Web Interface: ‚ùå Not running"
    fi
    
    # Show Termux API status if available
    if [ "$TERMUX_ENABLED" = true ]; then
        echo ""
        echo "Termux APIs:"
        command -v termux-battery-status >/dev/null 2>&1 && echo "  Battery: ‚úÖ" || echo "  Battery: ‚ùå"
        command -v termux-wifi-connectioninfo >/dev/null 2>&1 && echo "  WiFi: ‚úÖ" || echo "  WiFi: ‚ùå"
        command -v termux-telephony-deviceinfo >/dev/null 2>&1 && echo "  Telephony: ‚úÖ" || echo "  Telephony: ‚ùå"
    fi
    
    # Show recent log entries
    if [ -f "$CHR_NODE_LOGS/chr-node.log" ]; then
        echo ""
        echo "Recent Log Entries:"
        tail -5 "$CHR_NODE_LOGS/chr-node.log"
    fi
}

# Main command handling
case "$1" in
    start)
        start_service
        ;;
    stop)
        stop_service
        ;;
    restart)
        stop_service
        sleep 2
        start_service
        ;;
    status)
        show_status
        ;;
    version)
        echo "chr-node 1.0.0-android-dev"
        echo "Platform: $PLATFORM"
        echo "Architecture: x86_64 (64-bit Intel)"
        echo "Build: $(date +%Y%m%d)"
        echo "Termux: $TERMUX_ENABLED"
        ;;
    help|--help)
        echo "chr-node - Chronara Network Lite Node (Android/Termux)"
        echo ""
        echo "Usage: chr-node [command]"
        echo ""
        echo "Commands:"
        echo "  start      Start chr-node service"
        echo "  stop       Stop chr-node service" 
        echo "  restart    Restart chr-node service"
        echo "  status     Show service status"
        echo "  version    Show version information"
        echo "  help       Show this help message"
        echo ""
        echo "Environment Variables:"
        echo "  CHR_NODE_HOME     Installation directory (default: ~/.chr-node)"
        echo "  CHR_NODE_CONFIG   Configuration file (default: ~/.chr-node/config/chr-node.conf)"
        echo ""
        echo "Files:"
        echo "  Config: $CHR_NODE_CONFIG"
        echo "  Logs: $CHR_NODE_LOGS/chr-node.log" 
        echo "  Web: http://localhost:3000"
        echo ""
        echo "This is an Android/Termux development binary."
        ;;
    *)
        echo "chr-node: unknown command '$1'"
        echo "Use 'chr-node help' for available commands"
        exit 1
        ;;
esac

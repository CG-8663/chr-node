defmodule KBucketsTest do
  use Bitwise
  use ExUnit.Case, async: true

  alias KBuckets.Item

  test "initialize" do
    kb = KBuckets.new(node_id("abcd"))
    assert KBuckets.size(kb) == 1
    assert KBuckets.bucket_count(kb) == 1
  end

  test "k inserts" do
    kb = KBuckets.new(node_id("abcd"))

    kb =
      Enum.reduce(nodes(20), kb, fn node, acc ->
        KBuckets.insert_item(acc, node)
      end)

    assert KBuckets.size(kb) == 21
    assert KBuckets.bucket_count(kb) == 2
  end

  test "conflict" do
    conflicts = conflicts()
    kb = KBuckets.new(node_id("abcd"))

    kb =
      Enum.reduce(nodes(100), kb, fn node, acc ->
        acc2 = KBuckets.insert_item(acc, node)

        # if acc == acc2 do
        #   :io.format("~400p,~n", [KBuckets.key(node)])
        # end

        if MapSet.member?(conflicts, KBuckets.key(node)) do
          assert acc2 == acc
        else
          assert acc2 != acc
        end

        acc2
      end)

    assert KBuckets.size(kb) == 101 - MapSet.size(conflicts)
  end

  test "nearest" do
    kb = KBuckets.new(node_id("abcd"))

    kb =
      Enum.reduce(nodes(100), kb, fn node, acc ->
        KBuckets.insert_item(acc, node)
      end)

    assert KBuckets.size(kb) == 57

    # Should only return self as nearest result
    near = KBuckets.nearest_n(kb, KBuckets.self(kb), KBuckets.k())
    assert Enum.member?(near, KBuckets.self(kb))
    assert length(near) == 1

    # Should be exactly @k
    opposite = binary_not(KBuckets.hash(node_id("abcd")))
    near = KBuckets.nearest_n(kb, opposite, KBuckets.k())
    assert not Enum.member?(near, KBuckets.self(kb))
    assert length(near) == 20

    nearer = KBuckets.nearest_n(kb, opposite, div(KBuckets.k(), 2))
    assert not Enum.member?(nearer, KBuckets.self(kb))
    assert length(nearer) == div(KBuckets.k(), 2)

    nearest = KBuckets.nearest_n(kb, opposite, 1)
    assert not Enum.member?(nearest, KBuckets.self(kb))
    assert length(nearest) == 1
  end

  test "no duplicate" do
    kb =
      KBuckets.new(node_id("abcd"))
      |> KBuckets.insert_item(%Item{node_id: node_id([1]), last_seen: 1, object: :fake})
      |> KBuckets.insert_item(%Item{node_id: node_id([1]), last_seen: 2, object: :fake})

    assert KBuckets.size(kb) == 2
  end

  test "unique()" do
    items = [
      %Item{node_id: node_id([1]), last_seen: 1, object: :fake},
      %Item{node_id: node_id([1]), last_seen: 2, object: :fake}
    ]

    unique = KBuckets.unique(items)

    assert length(unique) == 1
    assert List.last(items) == List.first(unique)
  end

  test "deletes" do
    kb = KBuckets.new(node_id("abcd"))

    kb =
      Enum.reduce(nodes(20), kb, fn node, acc ->
        KBuckets.insert_item(acc, node)
      end)

    assert KBuckets.size(kb) == 21
    assert KBuckets.bucket_count(kb) == 2

    kb =
      Enum.reduce(nodes(10), kb, fn node, acc ->
        KBuckets.delete_item(acc, node)
      end)

    assert KBuckets.size(kb) == 11
    assert KBuckets.bucket_count(kb) == 2
  end

  ##
  ## Helper functions
  ##
  defp binary_not(bin) do
    :erlang.binary_to_list(bin)
    |> Enum.map(fn x -> rem(x + 128, 256) end)
    |> :erlang.list_to_binary()
  end

  def nodes(num) do
    Enum.map(1..num, fn idx ->
      %Item{node_id: node_id([idx]), last_seen: idx, object: :fake}
    end)
  end

  def node_id(x) do
    Wallet.from_pubkey(<<2::integer-size(8), Diode.hash(x)::binary>>)
  end

  defp conflicts() do
    MapSet.new([
      <<252, 150, 100, 211, 132, 205, 156, 113, 178, 201, 42, 31, 113, 6, 125, 206, 69, 185, 36,
        168, 53, 198, 50, 202, 20, 159, 107, 67, 199, 134, 62, 178>>,
      <<150, 6, 156, 73, 235, 79, 247, 25, 51, 22, 22, 128, 12, 63, 251, 196, 227, 95, 171, 45,
        166, 76, 189, 207, 243, 229, 123, 114, 158, 33, 154, 140>>,
      <<149, 163, 38, 147, 172, 42, 246, 207, 107, 132, 17, 217, 148, 130, 85, 186, 238, 51, 200,
        137, 185, 198, 6, 20, 114, 75, 172, 6, 210, 204, 183, 169>>,
      <<210, 145, 1, 158, 43, 201, 142, 43, 1, 25, 102, 125, 230, 133, 89, 107, 203, 149, 79, 32,
        201, 156, 79, 119, 155, 35, 98, 76, 148, 81, 238, 183>>,
      <<138, 222, 21, 177, 158, 229, 151, 144, 73, 25, 128, 0, 85, 38, 39, 56, 111, 187, 54, 61,
        73, 143, 86, 28, 86, 25, 17, 223, 10, 181, 244, 1>>,
      <<154, 9, 156, 60, 40, 101, 124, 149, 204, 141, 203, 52, 128, 87, 19, 43, 36, 157, 19, 164,
        112, 174, 204, 226, 123, 85, 208, 206, 41, 122, 232, 132>>,
      <<189, 187, 234, 94, 42, 157, 245, 240, 117, 102, 175, 243, 236, 218, 106, 249, 214, 230,
        110, 143, 205, 250, 255, 253, 1, 67, 182, 74, 197, 44, 4, 120>>,
      <<200, 83, 1, 101, 255, 139, 8, 66, 169, 128, 199, 208, 80, 32, 111, 63, 34, 244, 212, 22,
        194, 122, 71, 203, 239, 70, 95, 186, 176, 94, 109, 52>>,
      <<178, 71, 106, 3, 224, 126, 138, 50, 36, 139, 16, 40, 148, 24, 69, 33, 253, 220, 6, 96, 56,
        142, 118, 108, 109, 224, 126, 227, 188, 142, 7, 130>>,
      <<173, 102, 120, 29, 36, 61, 43, 193, 117, 205, 210, 184, 7, 182, 216, 6, 6, 249, 92, 103,
        32, 58, 66, 165, 209, 110, 26, 245, 117, 100, 234, 131>>,
      <<218, 217, 83, 14, 16, 57, 26, 248, 171, 49, 143, 186, 139, 156, 113, 39, 205, 42, 218, 22,
        152, 19, 186, 57, 73, 74, 214, 234, 253, 69, 90, 83>>,
      <<134, 49, 86, 182, 33, 126, 16, 95, 110, 72, 230, 59, 86, 49, 132, 237, 225, 107, 107, 8,
        17, 118, 221, 156, 80, 47, 185, 233, 202, 126, 220, 49>>,
      <<225, 23, 156, 178, 150, 73, 209, 116, 245, 157, 107, 248, 63, 31, 119, 189, 239, 161, 42,
        187, 20, 73, 253, 200, 64, 238, 60, 68, 119, 74, 239, 101>>,
      <<240, 173, 155, 185, 115, 10, 90, 82, 36, 245, 195, 49, 155, 44, 7, 225, 91, 34, 194, 168,
        44, 79, 92, 108, 65, 204, 212, 77, 205, 193, 209, 219>>,
      <<253, 185, 22, 39, 228, 183, 219, 217, 167, 112, 115, 83, 152, 239, 93, 245, 128, 237, 208,
        102, 159, 78, 185, 99, 38, 166, 251, 83, 130, 164, 151, 236>>,
      <<242, 26, 21, 200, 250, 162, 174, 46, 74, 159, 33, 97, 66, 15, 2, 101, 49, 181, 146, 69,
        212, 1, 52, 68, 235, 73, 30, 210, 195, 150, 16, 85>>,
      <<252, 171, 159, 169, 106, 4, 214, 219, 242, 132, 6, 176, 7, 65, 18, 39, 153, 7, 41, 68, 98,
        83, 181, 70, 169, 222, 253, 71, 121, 60, 26, 252>>,
      <<192, 189, 233, 230, 130, 122, 144, 11, 31, 65, 115, 15, 107, 62, 160, 138, 237, 184, 14,
        244, 97, 156, 231, 91, 198, 246, 20, 246, 213, 141, 188, 199>>,
      <<145, 243, 3, 69, 10, 58, 60, 143, 136, 167, 236, 194, 11, 96, 63, 217, 127, 97, 172, 17,
        218, 77, 52, 43, 4, 19, 3, 32, 66, 180, 51, 148>>,
      <<180, 99, 126, 200, 115, 15, 192, 130, 196, 17, 217, 141, 236, 156, 207, 92, 130, 229, 94,
        203, 171, 45, 108, 155, 96, 147, 62, 175, 36, 28, 134, 17>>,
      <<221, 144, 221, 194, 134, 95, 4, 17, 195, 189, 216, 11, 10, 174, 251, 117, 123, 176, 87, 8,
        101, 136, 215, 246, 60, 240, 143, 146, 15, 1, 9, 189>>,
      <<221, 167, 81, 133, 107, 182, 134, 53, 200, 142, 98, 165, 87, 206, 82, 242, 197, 23, 209,
        12, 215, 134, 87, 179, 149, 251, 3, 91, 245, 233, 181, 39>>,
      <<50, 37, 216, 242, 236, 165, 191, 79, 219, 105, 216, 142, 69, 17, 121, 113, 89, 127, 7, 35,
        217, 221, 90, 194, 125, 189, 248, 3, 10, 237, 36, 8>>,
      <<0, 164, 221, 220, 49, 176, 196, 235, 236, 67, 185, 160, 130, 91, 31, 248, 186, 112, 160,
        203, 143, 15, 95, 107, 59, 79, 147, 139, 17, 230, 159, 134>>,
      <<221, 167, 58, 121, 101, 109, 159, 31, 165, 255, 210, 213, 240, 155, 208, 115, 235, 90, 62,
        255, 91, 167, 11, 6, 31, 142, 99, 142, 133, 230, 6, 139>>,
      <<216, 156, 62, 179, 250, 49, 200, 173, 210, 202, 145, 15, 230, 69, 52, 245, 241, 150, 22,
        213, 224, 205, 9, 37, 27, 233, 151, 170, 108, 189, 11, 253>>,
      <<54, 16, 60, 175, 40, 96, 237, 90, 210, 172, 176, 177, 172, 182, 112, 244, 245, 36, 135,
        109, 148, 233, 33, 255, 110, 249, 156, 27, 24, 235, 109, 33>>,
      <<189, 252, 184, 14, 111, 227, 103, 99, 143, 117, 120, 205, 174, 217, 198, 118, 53, 235, 17,
        193, 5, 146, 168, 161, 200, 106, 222, 200, 155, 73, 170, 70>>,
      <<188, 62, 230, 115, 122, 150, 251, 91, 140, 47, 163, 184, 115, 24, 41, 59, 176, 4, 225, 37,
        180, 125, 48, 141, 231, 63, 219, 42, 38, 228, 116, 114>>,
      <<235, 250, 6, 2, 6, 92, 7, 208, 56, 63, 146, 72, 91, 113, 86, 20, 6, 179, 108, 232, 156,
        175, 135, 54, 244, 191, 253, 138, 103, 72, 204, 23>>,
      <<5, 19, 125, 144, 5, 27, 20, 153, 36, 60, 72, 235, 85, 248, 59, 95, 152, 103, 254, 208,
        227, 28, 9, 142, 236, 161, 60, 26, 173, 227, 243, 112>>,
      <<198, 195, 46, 50, 190, 120, 58, 175, 103, 110, 206, 21, 234, 126, 251, 98, 100, 139, 126,
        133, 105, 187, 111, 45, 163, 90, 113, 100, 76, 16, 49, 172>>,
      <<164, 21, 24, 163, 78, 13, 2, 209, 60, 161, 165, 134, 143, 114, 160, 233, 215, 94, 25, 232,
        137, 42, 191, 219, 54, 192, 209, 58, 118, 124, 208, 153>>,
      <<195, 108, 100, 175, 209, 39, 65, 213, 102, 27, 108, 170, 8, 87, 68, 165, 74, 86, 74, 100,
        169, 192, 171, 103, 55, 38, 250, 206, 193, 144, 200, 67>>,
      <<4, 181, 242, 95, 248, 131, 63, 177, 12, 234, 139, 136, 142, 238, 102, 96, 92, 233, 233,
        78, 161, 53, 45, 201, 66, 18, 2, 61, 168, 252, 176, 203>>,
      <<173, 8, 233, 54, 18, 88, 122, 248, 169, 201, 171, 237, 17, 186, 60, 249, 17, 39, 141, 63,
        7, 168, 225, 11, 54, 48, 9, 97, 196, 192, 19, 64>>,
      <<148, 53, 227, 20, 141, 242, 150, 130, 238, 89, 14, 70, 232, 225, 148, 243, 145, 212, 46,
        157, 162, 60, 54, 208, 65, 247, 201, 133, 11, 3, 107, 150>>,
      <<221, 12, 203, 88, 178, 211, 244, 190, 157, 60, 54, 150, 51, 218, 244, 200, 65, 233, 28,
        217, 8, 160, 107, 145, 86, 214, 189, 226, 46, 198, 96, 249>>,
      <<61, 88, 221, 148, 107, 94, 113, 173, 10, 23, 181, 122, 215, 207, 237, 148, 52, 198, 189,
        201, 119, 183, 197, 2, 54, 30, 145, 199, 68, 185, 131, 15>>,
      <<221, 5, 200, 212, 28, 103, 240, 223, 172, 241, 97, 132, 201, 179, 178, 244, 48, 174, 24,
        40, 186, 190, 152, 123, 140, 147, 48, 130, 15, 95, 22, 75>>,
      <<49, 231, 237, 74, 121, 8, 86, 100, 119, 38, 197, 124, 215, 92, 232, 235, 54, 32, 162, 15,
        247, 43, 238, 139, 129, 21, 176, 56, 202, 107, 33, 53>>,
      <<171, 101, 86, 5, 111, 196, 104, 252, 224, 34, 205, 249, 10, 159, 247, 147, 49, 253, 54,
        198, 232, 174, 238, 169, 231, 148, 189, 247, 136, 11, 185, 216>>,
      <<41, 47, 240, 119, 46, 156, 1, 139, 47, 10, 198, 119, 44, 155, 247, 12, 106, 33, 94, 213,
        125, 21, 159, 63, 159, 27, 210, 150, 81, 171, 209, 207>>,
      <<206, 2, 225, 138, 153, 47, 17, 132, 213, 181, 212, 72, 64, 140, 149, 249, 54, 37, 227, 7,
        186, 115, 192, 57, 41, 137, 165, 139, 76, 233, 206, 99>>
    ])
  end
end
